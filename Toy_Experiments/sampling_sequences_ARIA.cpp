#include <bits/stdc++.h>
using namespace std;

// Variables for First Phase
int x[5][16], y[5][16], z[5][16], xx[5][16], yy[5][16], zz[5][16], dx[5][16], dy[5][16], dz[5][16];

// Variables for Second Phase
int X[256][16], Y[256][16], Z[256][16], DX[256][16], DY[256][16], DZ[256][16];

// S-box, Inverse S-box
int Sbox1[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};
int Sbox2[256] = {
	0xe2, 0x4e, 0x54, 0xfc, 0x94, 0xc2, 0x4a, 0xcc, 0x62, 0x0d, 0x6a, 0x46, 0x3c, 0x4d, 0x8b, 0xd1,
	0x5e, 0xfa, 0x64, 0xcb, 0xb4, 0x97, 0xbe, 0x2b, 0xbc, 0x77, 0x2e, 0x03, 0xd3, 0x19, 0x59, 0xc1,
	0x1d, 0x06, 0x41, 0x6b, 0x55, 0xf0, 0x99, 0x69, 0xea, 0x9c, 0x18, 0xae, 0x63, 0xdf, 0xe7, 0xbb,
	0x00, 0x73, 0x66, 0xfb, 0x96, 0x4c, 0x85, 0xe4, 0x3a, 0x09, 0x45, 0xaa, 0x0f, 0xee, 0x10, 0xeb,
	0x2d, 0x7f, 0xf4, 0x29, 0xac, 0xcf, 0xad, 0x91, 0x8d, 0x78, 0xc8, 0x95, 0xf9, 0x2f, 0xce, 0xcd,
	0x08, 0x7a, 0x88, 0x38, 0x5c, 0x83, 0x2a, 0x28, 0x47, 0xdb, 0xb8, 0xc7, 0x93, 0xa4, 0x12, 0x53,
	0xff, 0x87, 0x0e, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8e, 0x37, 0x74, 0x32, 0xca, 0xe9, 0xb1,
	0xb7, 0xab, 0x0c, 0xd7, 0xc4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xd9, 0xb6, 0xb9, 0x11, 0x40,
	0xec, 0x20, 0x8c, 0xbd, 0xa0, 0xc9, 0x84, 0x04, 0x49, 0x23, 0xf1, 0x4f, 0x50, 0x1f, 0x13, 0xdc,
	0xd8, 0xc0, 0x9e, 0x57, 0xe3, 0xc3, 0x7b, 0x65, 0x3b, 0x02, 0x8f, 0x3e, 0xe8, 0x25, 0x92, 0xe5,
	0x15, 0xdd, 0xfd, 0x17, 0xa9, 0xbf, 0xd4, 0x9a, 0x7e, 0xc5, 0x39, 0x67, 0xfe, 0x76, 0x9d, 0x43,
	0xa7, 0xe1, 0xd0, 0xf5, 0x68, 0xf2, 0x1b, 0x34, 0x70, 0x05, 0xa3, 0x8a, 0xd5, 0x79, 0x86, 0xa8,
	0x30, 0xc6, 0x51, 0x4b, 0x1e, 0xa6, 0x27, 0xf6, 0x35, 0xd2, 0x6e, 0x24, 0x16, 0x82, 0x5f, 0xda,
	0xe6, 0x75, 0xa2, 0xef, 0x2c, 0xb2, 0x1c, 0x9f, 0x5d, 0x6f, 0x80, 0x0a, 0x72, 0x44, 0x9b, 0x6c,
	0x90, 0x0b, 0x5b, 0x33, 0x7d, 0x5a, 0x52, 0xf3, 0x61, 0xa1, 0xf7, 0xb0, 0xd6, 0x3f, 0x7c, 0x6d,
	0xed, 0x14, 0xe0, 0xa5, 0x3d, 0x22, 0xb3, 0xf8, 0x89, 0xde, 0x71, 0x1a, 0xaf, 0xba, 0xb5, 0x81
};
int iSbox1[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};
int iSbox2[256] = {
	0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
	0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
	0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
	0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
	0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
	0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
	0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
	0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
	0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
	0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
	0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
	0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
	0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
	0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
	0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
	0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60
};

// Differential Distribution Tables
vector<int> DDT_Sbox1[256][256], DDT_Sbox2[256][256], DDT_iSbox1[256][256], DDT_iSbox2[256][256];

// For File Output
FILE* in;

// For counting gathered sequences
int seq_cnt = 0;
int sampling_threshold = 1 << 20;

// Construct DDT
void build_DDT();

// Step 1. of First Phase.
void get_16_params();

// Step 2. of First Phase + Second Phase
void get_30_params();

// Second Phase.
void get_sequence();

// main
int main() {
	in = fopen("Sampling_Result_ARIA.txt", "w");
	build_DDT();
	while (true) {
		get_16_params();
		get_30_params();
		if (seq_cnt == sampling_threshold) {
			fclose(in);
			break;
		}
	}
}

// Construct DDT
void build_DDT() {
	for (int i = 0; i < 256; i++) {
		for (int j = i + 1; j < 256; j++) {
			DDT_Sbox1[i ^ j][Sbox1[i] ^ Sbox1[j]].push_back(i);
			DDT_Sbox1[i ^ j][Sbox1[i] ^ Sbox1[j]].push_back(j);

			DDT_Sbox2[i ^ j][Sbox2[i] ^ Sbox2[j]].push_back(i);
			DDT_Sbox2[i ^ j][Sbox2[i] ^ Sbox2[j]].push_back(j);

			DDT_iSbox1[i ^ j][iSbox1[i] ^ iSbox1[j]].push_back(i);
			DDT_iSbox1[i ^ j][iSbox1[i] ^ iSbox1[j]].push_back(j);

			DDT_iSbox2[i ^ j][iSbox2[i] ^ iSbox2[j]].push_back(i);
			DDT_iSbox2[i ^ j][iSbox2[i] ^ iSbox2[j]].push_back(j);
		}
	}
}

// Step 1. of First Phase.
void get_16_params() {
	dy[1][0] = rand() % 255 + 1;
	x[2][3] = rand() % 256;
	x[2][4] = rand() % 256;
	x[2][6] = rand() % 256;
	x[2][8] = rand() % 256;
	x[2][9] = rand() % 256;
	x[2][13] = rand() % 256;
	x[2][14] = rand() % 256;
	y[4][3] = rand() % 256;
	y[4][4] = rand() % 256;
	y[4][6] = rand() % 256;
	y[4][8] = rand() % 256;
	y[4][9] = rand() % 256;
	y[4][13] = rand() % 256;
	y[4][14] = rand() % 256;
	dz[4][0] = rand() % 255 + 1;
}

// Step 2. of First Phase + Second Phase
void get_30_params() {
	xx[2][3] = x[2][3] ^ dy[1][0];
	xx[2][4] = x[2][4] ^ dy[1][0];
	xx[2][6] = x[2][6] ^ dy[1][0];
	xx[2][8] = x[2][8] ^ dy[1][0];
	xx[2][9] = x[2][9] ^ dy[1][0];
	xx[2][13] = x[2][13] ^ dy[1][0];
	xx[2][14] = x[2][14] ^ dy[1][0];

	dy[2][3] = iSbox2[x[2][3]] ^ iSbox2[xx[2][3]];
	dy[2][4] = Sbox1[x[2][4]] ^ Sbox1[xx[2][4]];
	dy[2][6] = iSbox1[x[2][6]] ^ iSbox1[xx[2][6]];
	dy[2][8] = Sbox1[x[2][8]] ^ Sbox1[xx[2][8]];
	dy[2][9] = Sbox2[x[2][9]] ^ Sbox2[xx[2][9]];
	dy[2][13] = Sbox2[x[2][13]] ^ Sbox2[xx[2][13]];
	dy[2][14] = iSbox1[x[2][14]] ^ iSbox1[xx[2][14]];

	dx[3][0] = dy[2][3] ^ dy[2][4] ^ dy[2][6] ^ dy[2][8] ^ dy[2][9] ^ dy[2][13] ^ dy[2][14];
	dx[3][1] = dy[2][8] ^ dy[2][9];
	dx[3][2] = dy[2][4] ^ dy[2][6];
	dx[3][3] = dy[2][13] ^ dy[2][14];
	dx[3][4] = dy[2][8] ^ dy[2][14];
	dx[3][5] = dy[2][3] ^ dy[2][4] ^ dy[2][9] ^ dy[2][14];
	dx[3][6] = dy[2][9] ^ dy[2][13];
	dx[3][7] = dy[2][3] ^ dy[2][6] ^ dy[2][8] ^ dy[2][13];
	dx[3][8] = dy[2][4] ^ dy[2][13];
	dx[3][9] = dy[2][6] ^ dy[2][14];
	dx[3][10] = dy[2][3] ^ dy[2][6] ^ dy[2][8] ^ dy[2][13];
	dx[3][11] = dy[2][3] ^ dy[2][4] ^ dy[2][9] ^ dy[2][14];
	dx[3][12] = dy[2][6] ^ dy[2][9];
	dx[3][13] = dy[2][3] ^ dy[2][6] ^ dy[2][8] ^ dy[2][13];
	dx[3][14] = dy[2][3] ^ dy[2][4] ^ dy[2][9] ^ dy[2][14];
	dx[3][15] = dy[2][4] ^ dy[2][8];

	yy[4][3] = y[4][3] ^ dz[4][0];
	yy[4][4] = y[4][4] ^ dz[4][0];
	yy[4][6] = y[4][6] ^ dz[4][0];
	yy[4][8] = y[4][8] ^ dz[4][0];
	yy[4][9] = y[4][9] ^ dz[4][0];
	yy[4][13] = y[4][13] ^ dz[4][0];
	yy[4][14] = y[4][14] ^ dz[4][0];

	x[4][3] = Sbox2[y[4][3]];
	x[4][4] = iSbox1[y[4][4]];
	x[4][6] = Sbox1[y[4][6]];
	x[4][8] = iSbox1[y[4][8]];
	x[4][9] = iSbox2[y[4][9]];
	x[4][13] = iSbox2[y[4][13]];
	x[4][14] = Sbox1[y[4][14]];

	dz[3][3] = x[4][3] ^ Sbox2[yy[4][3]];
	dz[3][4] = x[4][4] ^ iSbox1[yy[4][4]];
	dz[3][6] = x[4][6] ^ Sbox1[yy[4][6]];
	dz[3][8] = x[4][8] ^ iSbox1[yy[4][8]];
	dz[3][9] = x[4][9] ^ iSbox2[yy[4][9]];
	dz[3][13] = x[4][13] ^ iSbox2[yy[4][13]];
	dz[3][14] = x[4][14] ^ Sbox1[yy[4][14]];

	dy[3][0] = dz[3][3] ^ dz[3][4] ^ dz[3][6] ^ dz[3][8] ^ dz[3][9] ^ dz[3][13] ^ dz[3][14];
	dy[3][1] = dz[3][8] ^ dz[3][9];
	dy[3][2] = dz[3][4] ^ dz[3][6];
	dy[3][3] = dz[3][13] ^ dz[3][14];
	dy[3][4] = dz[3][8] ^ dz[3][14];
	dy[3][5] = dz[3][3] ^ dz[3][4] ^ dz[3][9] ^ dz[3][14];
	dy[3][6] = dz[3][9] ^ dz[3][13];
	dy[3][7] = dz[3][3] ^ dz[3][6] ^ dz[3][8] ^ dz[3][13];
	dy[3][8] = dz[3][4] ^ dz[3][13];
	dy[3][9] = dz[3][6] ^ dz[3][14];
	dy[3][10] = dz[3][3] ^ dz[3][6] ^ dz[3][8] ^ dz[3][13];
	dy[3][11] = dz[3][3] ^ dz[3][4] ^ dz[3][9] ^ dz[3][14];
	dy[3][12] = dz[3][6] ^ dz[3][9];
	dy[3][13] = dz[3][3] ^ dz[3][6] ^ dz[3][8] ^ dz[3][13];
	dy[3][14] = dz[3][3] ^ dz[3][4] ^ dz[3][9] ^ dz[3][14];
	dy[3][15] = dz[3][4] ^ dz[3][8];

	for (int i = 0; i < 4; i++) {
		if (DDT_Sbox1[dx[3][4 * i]][dy[3][4 * i]].size() == 0) return;
	}
	for (int i = 0; i < 4; i++) {
		if (DDT_Sbox2[dx[3][4 * i + 1]][dy[3][4 * i + 1]].size() == 0) return;
	}
	for (int i = 0; i < 4; i++) {
		if (DDT_iSbox1[dx[3][4 * i + 2]][dy[3][4 * i + 2]].size() == 0) return;
	}
	for (int i = 0; i < 4; i++) {
		if (DDT_iSbox2[dx[3][4 * i + 3]][dy[3][4 * i + 3]].size() == 0) return;
	}

	for (auto i0 : DDT_Sbox1[dx[3][0]][dy[3][0]]) {
		for (auto i1 : DDT_Sbox2[dx[3][1]][dy[3][1]]) {
			for (auto i2 : DDT_iSbox1[dx[3][2]][dy[3][2]]) {
				for (auto i3 : DDT_iSbox2[dx[3][3]][dy[3][3]]) {
					for (auto i4 : DDT_Sbox1[dx[3][4]][dy[3][4]]) {
						for (auto i5 : DDT_Sbox2[dx[3][5]][dy[3][5]]) {
							for (auto i6 : DDT_iSbox1[dx[3][6]][dy[3][6]]) {
								for (auto i7 : DDT_iSbox2[dx[3][7]][dy[3][7]]) {
									for (auto i8 : DDT_Sbox1[dx[3][8]][dy[3][8]]) {
										for (auto i9 : DDT_Sbox2[dx[3][9]][dy[3][9]]) {
											for (auto i10 : DDT_iSbox1[dx[3][10]][dy[3][10]]) {
												for (auto i11 : DDT_iSbox2[dx[3][11]][dy[3][11]]) {
													for (auto i12 : DDT_Sbox1[dx[3][12]][dy[3][12]]) {
														for (auto i13 : DDT_Sbox2[dx[3][13]][dy[3][13]]) {
															for (auto i14 : DDT_iSbox1[dx[3][14]][dy[3][14]]) {
																for (auto i15 : DDT_iSbox2[dx[3][15]][dy[3][15]]) {
																	x[3][0] = i0;
																	x[3][1] = i1;
																	x[3][2] = i2;
																	x[3][3] = i3;
																	x[3][4] = i4;
																	x[3][5] = i5;
																	x[3][6] = i6;
																	x[3][7] = i7;
																	x[3][8] = i8;
																	x[3][9] = i9;
																	x[3][10] = i10;
																	x[3][11] = i11;
																	x[3][12] = i12;
																	x[3][13] = i13;
																	x[3][14] = i14;
																	x[3][15] = i15;

																	get_sequence();
																	if (seq_cnt == sampling_threshold) return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

// Second Phase.
void get_sequence() {
	vector<int> cnt(256, 0);
	for (int i = 0; i < 256; i++) {
		X[i][3] = x[2][3] ^ i;
		X[i][4] = x[2][4] ^ i;
		X[i][6] = x[2][4] ^ i;
		X[i][8] = x[2][8] ^ i;
		X[i][9] = x[2][9] ^ i;
		X[i][13] = x[2][13] ^ i;
		X[i][14] = x[2][14] ^ i;

		Y[i][3] = iSbox2[X[i][3]];
		Y[i][4] = Sbox1[X[i][4]];
		Y[i][6] = iSbox1[X[i][6]];
		Y[i][8] = Sbox1[X[i][8]];
		Y[i][9] = Sbox2[X[i][9]];
		Y[i][13] = Sbox1[X[i][13]];
		Y[i][14] = iSbox1[X[i][14]];

		DY[i][3] = Y[0][3] ^ Y[i][3];
		DY[i][4] = Y[0][4] ^ Y[i][4];
		DY[i][6] = Y[0][6] ^ Y[i][6];
		DY[i][8] = Y[0][8] ^ Y[i][8];
		DY[i][9] = Y[0][9] ^ Y[i][9];
		DY[i][13] = Y[0][13] ^ Y[i][13];
		DY[i][14] = Y[0][14] ^ Y[i][14];

		DZ[i][0] = DY[i][3] ^ DY[i][4] ^ DY[i][6] ^ DY[i][8] ^ DY[i][9] ^ DY[i][13] ^ DY[i][14];
		DZ[i][1] = DY[i][8] ^ DY[i][9];
		DZ[i][2] = DY[i][4] ^ DY[i][6];
		DZ[i][3] = DY[i][13] ^ DY[i][14];
		DZ[i][4] = DY[i][8] ^ DY[i][14];
		DZ[i][5] = DY[i][3] ^ DY[i][4] ^ DY[i][9] ^ DY[i][14];
		DZ[i][6] = DY[i][9] ^ DY[i][13];
		DZ[i][7] = DY[i][3] ^ DY[i][6] ^ DY[i][8] ^ DY[i][13];
		DZ[i][8] = DY[i][4] ^ DY[i][13];
		DZ[i][9] = DY[i][6] ^ DY[i][14];
		DZ[i][10] = DY[i][3] ^ DY[i][6] ^ DY[i][8] ^ DY[i][13];
		DZ[i][11] = DY[i][3] ^ DY[i][4] ^ DY[i][9] ^ DY[i][14];
		DZ[i][12] = DY[i][6] ^ DY[i][9];
		DZ[i][13] = DY[i][3] ^ DY[i][6] ^ DY[i][8] ^ DY[i][13];
		DZ[i][14] = DY[i][3] ^ DY[i][4] ^ DY[i][9] ^ DY[i][14];
		DZ[i][15] = DY[i][4] ^ DY[i][8];

		for (int j = 0; j < 16; j++) X[i][j] = x[3][j] ^ DZ[i][j];

		for (int j = 0; j < 4; j++) {
			Y[i][4 * j] = Sbox1[X[i][4 * j]];
			Y[i][4 * j + 1] = Sbox2[X[i][4 * j + 1]];
			Y[i][4 * j + 2] = iSbox1[X[i][4 * j + 2]];
			Y[i][4 * j + 3] = iSbox2[X[i][4 * j + 3]];
		}

		for (int j = 0; j < 16; j++) DY[i][j] = Y[0][j] ^ Y[i][j];

		DZ[i][3] = DY[i][0] ^ DY[i][5] ^ DY[i][7] ^ DY[i][10] ^ DY[i][11] ^ DY[i][13] ^ DY[i][14];
		DZ[i][4] = DY[i][0] ^ DY[i][2] ^ DY[i][5] ^ DY[i][8] ^ DY[i][11] ^ DY[i][14] ^ DY[i][15];
		DZ[i][6] = DY[i][0] ^ DY[i][2] ^ DY[i][7] ^ DY[i][9] ^ DY[i][10] ^ DY[i][12] ^ DY[i][13];
		DZ[i][8] = DY[i][0] ^ DY[i][1] ^ DY[i][4] ^ DY[i][7] ^ DY[i][10] ^ DY[i][13] ^ DY[i][14];
		DZ[i][9] = DY[i][0] ^ DY[i][1] ^ DY[i][5] ^ DY[i][6] ^ DY[i][11] ^ DY[i][12] ^ DY[i][14];
		DZ[i][13] = DY[i][0] ^ DY[i][3] ^ DY[i][6] ^ DY[i][7] ^ DY[i][8] ^ DY[i][10] ^ DY[i][13];
		DZ[i][14] = DY[i][0] ^ DY[i][3] ^ DY[i][4] ^ DY[i][5] ^ DY[i][9] ^ DY[i][11] ^ DY[i][14];

		X[i][3] = x[4][3] ^ DZ[i][3];
		X[i][4] = x[4][4] ^ DZ[i][4];
		X[i][6] = x[4][6] ^ DZ[i][6];
		X[i][8] = x[4][8] ^ DZ[i][8];
		X[i][9] = x[4][9] ^ DZ[i][9];
		X[i][13] = x[4][13] ^ DZ[i][13];
		X[i][14] = x[4][14] ^ DZ[i][14];

		Y[i][3] = iSbox2[X[i][3]];
		Y[i][4] = Sbox1[X[i][4]];
		Y[i][6] = iSbox1[X[i][6]];
		Y[i][8] = Sbox1[X[i][8]];
		Y[i][9] = Sbox2[X[i][9]];
		Y[i][13] = Sbox1[X[i][13]];
		Y[i][14] = iSbox1[X[i][14]];

		DY[i][3] = Y[0][3] ^ Y[i][3];
		DY[i][4] = Y[0][4] ^ Y[i][4];
		DY[i][6] = Y[0][6] ^ Y[i][6];
		DY[i][8] = Y[0][8] ^ Y[i][8];
		DY[i][9] = Y[0][9] ^ Y[i][9];
		DY[i][13] = Y[0][13] ^ Y[i][13];
		DY[i][14] = Y[0][14] ^ Y[i][14];

		DZ[i][0] = DY[i][3] ^ DY[i][4] ^ DY[i][6] ^ DY[i][8] ^ DY[i][9] ^ DY[i][13] ^ DY[i][14];

		fprintf(in, "%d ", DZ[i][0]);
	}
	fprintf(in, "\n");
	seq_cnt++;
}
